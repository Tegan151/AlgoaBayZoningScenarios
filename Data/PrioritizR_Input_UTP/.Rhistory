polygon <- st_join(polygon,ras,left=T,largest=T)
polygon <-polygon[,c( 'lock_in_ConsRes','lock_in_CmmNnEx', names(ras))]
#Crop polygon to MPA restricted and controlled
res <- polygon[polygon$lock_in_ConsRes == T,]
fish <- polygon[polygon$lock_in_CmmNnEx == T,]
d <- read.csv('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Data/BusinessAsUsual_layers_20240322/FinalZonesAndTargets.csv')
d <- d[d$MSP_id %in% names(polygon),]
id <- names(polygon)[!(names(polygon) %in% c("lock_in_ConsRes", 'lock_in_CmmNnEx',"geometry"))]
d$conres_area <- NA
d$fish_area <- NA
d$Total_PU <- NA
for(i in 1:length(id)){
tt <- polygon[,id[i]]
colnames(tt) <- c('feature','geometry')
d$Total_PU[d$MSP_id == id[i]] <- sum(tt$feature[tt$feature>0])
r <- res[,id[i]]
colnames(r) <- c('feature','geometry')
d$conres_area[d$MSP_id == id[i]] <- sum(r$feature[r$feature>0])
f <- fish[,id[i]]
colnames(f) <- c('feature','geometry')
d$fish_area[d$MSP_id == id[i]] <- sum(f$feature[f$feature>0])
rm(c,r,f)
}
head(d)
d$Target_PU <- d$Total_PU*d$target
#Now for all activities that are allowed in the MPA restricted and controlled zone, remove these PU from target_PU
#MPA Restricted
unique(d$category)
unique(d$subcat)
head(d)
temp <- d[d$category %in% c('CommFishery','SubFish','Heritage','RecreationNonExtract','RecreationExtract'),]
d <-  d[!(d$category %in% c('CommFishery','SubFish','Heritage','RecreationNonExtract','RecreationExtract')),]
temp$Target_PU <- temp$Target_PU - temp$conres_area
d <- rbind(temp,d)
#Remove features were more than targeted PUs are already met by the restricted MPA
d <- d[d$Target_PU>0,]
#Check for conservation layers were entire target is met in MPA restricted and controlled existing zones
head(d)
temp <- d[d$category %in% c('Conservation'),]
# d <-  d[!(d$category %in% c('Heritage','RecreationNonExtract')),]
temp$Target_PU <- temp$Target_PU - temp$conres_area
temp <- temp[temp$Target_PU<0,]
d <- d[!(d$MSP_id %in% temp$MSP_id),]
#Remove conservationand non extractive recreational features were more than targeted PUs are already met by the fish trips
temp <- d[d$category %in% c('Conservation','RecreationNonExtract','Heritage'),]
temp$Target_PU <- temp$Target_PU - temp$fish_area
temp <- temp[temp$fish_area>0,]
temp <- temp[temp$MSP_id != 'FshTrps',]
d <- d[!(d$MSP_id %in% temp$MSP_id),]
d <- rbind(temp,d)
d <- d[!(d$MSP_id %in% c('AntTrnR','RsTrnRs','OthrTrR')),]
temp <- temp[temp$Target_PU<0,]
d <- d[!(d$MSP_id %in% temp$MSP_id),]
# ggplot(ras)+
#   geom_sf(aes(fill=OthrTrR))
# temp[temp$Target_PU==0,]
# #Remove features were more than targeted PUs are already met by the controlled MPA
# temp <- temp[temp$Target_PU>0,]
# d <- rbind(temp,d)
#Double check that target PU for conservation features is enough to split
# temp <- d[d$category %in% c('Conservation'),]
# temp <- temp[temp$Target_PU < 1000,]
# temp$r <- temp$conres_area-temp$Target_PU
# temp$c <- temp$concon_area-temp$Target_PU
#Create target matrix for prioritizR
d$zone_1 <- round(d$Cons...Res*d$Target_PU ,0)
d$zone_2 <- round(d$Com.use...non*d$Target_PU,0)
d$zone_3 <- round(d$Com.use..Ex*d$Target_PU,0)
d$zone_4 <- round(d$Fisheries...Com*d$Target_PU,0)
d$zone_5 <- round(d$transport*d$Target_PU,0)
d$zone_6 <- round(d$mining*d$Target_PU,0)
ras <- ras[,names(ras) %in% d$MSP_id]
#join feature data to polygon
p1 <- st_drop_geometry(ras)
p2 <- st_drop_geometry(ras)
p3 <- st_drop_geometry(ras)
p4 <- st_drop_geometry(ras)
p5 <- st_drop_geometry(ras)
p6 <- st_drop_geometry(ras)
names(p1) <- paste(names(ras),'ConsRes',sep='_')
names(p2) <- paste(names(ras),'CmmNnEx',sep='_')
names(p3) <- paste(names(ras),'CmmExtr',sep='_')
names(p4) <- paste(names(ras),'CmmFshr',sep='_')
names(p5) <- paste(names(ras),'Trnsprt',sep='_')
names(p6) <- paste(names(ras),'Mining',sep='_')
polygon <- read_sf('BusinessAsUsual_layers_20240322/CostPolygon_and_locks.shp')
colnames(polygon) <- c( "ConsRes","CmmNnEx","CmmExtr","CmmFshr",'Trnsprt','Mining','lock_in_ConsRes','lock_in_CmmNnEx','lock_in_CmmExtr','lock_in_CmmFshr','lock_in_Trnsprt','lock_in_Mining' ,"geometry"   )
polygon$lock_in_ConsRes[is.na(polygon$lock_in_ConsRes)] <- 0
polygon$lock_in_CmmNnEx[is.na(polygon$lock_in_CmmNnEx)] <- 0
polygon$lock_in_CmmExtr[is.na(polygon$lock_in_CmmExtr)] <- 0
polygon$lock_in_CmmFshr[is.na(polygon$lock_in_CmmFshr)] <- 0
polygon$lock_in_Trnsprt[is.na(polygon$lock_in_Trnsprt)] <- 0
polygon$lock_in_Mining[is.na(polygon$lock_in_Mining)] <- 0
polygon$lock_in_ConsRes <- as.logical(polygon$lock_in_ConsRes)
polygon$lock_in_CmmNnEx <- as.logical(polygon$lock_in_CmmNnEx)
polygon$lock_in_CmmExtr <- as.logical(polygon$lock_in_CmmExtr)
polygon$lock_in_CmmFshr <- as.logical(polygon$lock_in_CmmFshr)
polygon$lock_in_Trnsprt <- as.logical(polygon$lock_in_Trnsprt)
polygon$lock_in_Mining <- as.logical(polygon$lock_in_Mining)
polygon <- cbind(polygon, p1,p2,p3,p4,p5,p6)
setwd('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Routput/PrioritizR_Input_BAU_20240322/')
saveRDS(polygon,'polygon.rds')
saveRDS(p1,'p1.rds')
saveRDS(p2,'p2.rds')
saveRDS(p3,'p3.rds')
saveRDS(p4,'p4.rds')
saveRDS(p5,'p5.rds')
saveRDS(p6,'p6.rds')
#Re-order targets and save as matrix
temp <- as.data.frame(matrix(ncol=ncol(d),nrow=nrow(d)))
colnames(temp) <- colnames(d)
feature <- names(st_drop_geometry(ras))
for(i in 1:length(feature)){
temp[i,] <- d[d$MSP_id == feature[i],]
}
d <- temp
targets <- matrix(
cbind(d$zone_1,d$zone_2,d$zone_3,d$zone_4,d$zone_5,d$zone_6),
nrow=nrow(d),
ncol=6,
dimnames = list(
d$MSP_id,c( "ConsRes","CmmNnEx","CmmExtr","CmmFshr",'Trnsprt','Mining')
)
)
saveRDS(targets,'targets.rds')
library(rgdal)
library(sf)
library(sp)
library(raster)
library(ggplot2)
library(prioritizr)
rm(list=ls())
setwd('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Data/')
# Make changes to feature layers
shp1 <- read_sf('PrioritizrLayers_20240322/AlgoaBay_featuresANDcosts10.shp')
shp <- read_sf('BusinessAsUsual_layers_20240322/Features.shp')
#Remove anchorage############
shp <- shp[,!(names(shp) %in% c('ANCHOR'))]
#Remove proposed ADZ#######
shp$MARICUL <- shp1$MARICUL
ggplot(shp)+
geom_sf(aes(fill=MARICUL))
write_sf(shp,'UntouchedParadise_layers_20240322/Features.shp')
######Set targets######
rm(list=ls())
shp <- read_sf('UntouchedParadise_layers_20240322/Features.shp')
colnames(shp)[order(colnames(shp))]
df <- as.data.frame(matrix(ncol=2,nrow=ncol(st_drop_geometry(shp))))
colnames(df) <- c('MSP_id','target')
df$MSP_id <- colnames(st_drop_geometry(shp))
#Add categories######
df$category <- NA
cat(paste(colnames(shp), collapse='", "'),sep='\n')
df$category[df$MSP_id %in% c('Llthgnt','Aaqudns','Aargyrzn','AbalnRf','AgISRS','AglDI','AglES','AglhBE','AglhERS','AglhsIS','AglhsMS','AglhSOS','AglhSRS','AglISS','AglMSRC','AglSMS','AgOSRC','AgSIS1','AgSMS1','Ainodrs','Ajapncs','AntTrnR','APBreed','Baitbll','BllShrk','BrnzWhl','BttlnDl','BWhale','Ccristcp','CGBreed','Cgibbcps','Clatcps','Cnasuts','Cnufar','ComDol','CrGnntA','CrPngnA','DamTrnF','Dhttntt','DmTrnNs','Dsargus','DTBreed','Emachnt','Emargnt','Erays','FishLrv','GanntUs','Gcrvdns','GllyShr','HammerJ','Hghprfl','Hmpbcks',"HBdlphn",'Hplblph','Lamia','Minke','Orca','Osharks','Pcmmrsn','PengnUs','Porodrm','Pprerbt','Prupstrs','Psaltrx','Pundlss','Raggies','Reef','Rholubi','RsTrnRs','SABAPbn','SABAPrc','Sdrbnns','Slaland','SqdSpwnn','SqudSpwn','Srays','SRghtWh','STBreed','Turtles','Urobnsn','WhtShrk','WrmTmAE','OthrTrR','SCP',"SandSharks"  )] <- 'Conservation'
df$category[df$MSP_id %in%c("DUMP") ] <- 'Dredge'
df$category[df$MSP_id %in% c("SHIPPIN","SHIPINT")] <- 'Shipping'
df$category[df$MSP_id %in% c("CUMULAT")] <- 'CUMULAT'
df$category[df$MSP_id %in% c("defence")] <- 'defence'
df$category[df$MSP_id %in% c("MARICUL")] <- 'ADZ'
df$category[df$MSP_id %in% c("Blstwtr", "wastwtr")] <- 'waste'
df$category[df$MSP_id %in%c("Brdwtch","CstWhlW","DiveRec","KiteBrd","LargBts","LifeSvC","OWSwim","RcrtnlB","CR_BH","CR_CC","CR_CR","CR_WS","ShrkCgD","SmallBt","SUP","Surfing","SurfSki") ] <- 'RecreationNonExtract'
df$category[df$MSP_id %in% c("SQUID", "TRAWL", "SHARKFI", "LINEFIS","SMALLPE",'SSF')] <- 'CommFishery'
df$category[df$MSP_id %in%c("FshTrps","CH_CC","CH_CR","CH_WS","CL_BH","CL_CC","CL_CR","CL_WS" ,"MddnsnP","OthrHrS","CS_BH","CS_WS","Wrecks" ) ] <- 'Heritage'
df$category[df$MSP_id %in%c('RcrtnlK','RcrtnlSh','RcrtnlSk','RcrtnlSp','RcrtnSC') ] <- 'RecreationExtract'
df$category[df$MSP_id %in%c("LS_BH","LS_CC","LS_CR","LS_WS","SbsstnF") ] <- 'SubFish'
df$MSP_id[is.na(df$category)]
summary(is.na(df))
#Set targets######
df$target[df$category %in% c("CommFishery",'RecreationExtract')] <- 0.3
df$target[df$category %in% c("Conservation",'SubFish','Heritage','RecreationNonExtract')] <- 0.6
df$target[df$category %in% c('ADZ')] <- 1
#add zone targets########
df$MSP_FeatureID[is.na(df$Cons...Res)]
df$Cons...Res <- NA
df$Cons...Res[df$category =='Conservation'] <- 1
df$Cons...Res[is.na(df$Cons...Res)] <- 0
df$Com.use..Ex <- NA
df$Com.use..Ex[df$category ==  c('RecreationExtract','SubFish')] <- 1
df$Com.use..Ex[is.na(df$Com.use..Ex)] <- 0
df$Com.use...non <- NA
df$Com.use...non[df$category ==  'Heritage'] <- 1
df$Com.use...non[df$category ==  'RecreationNonExtract'] <- 1
df$Com.use...non[is.na(df$Com.use...non)] <- 0
df$Fisheries...Com <- NA
df$Fisheries...Com[df$category ==  'CommFishery'] <- 1
df$Fisheries...Com[is.na(df$Fisheries...Com)] <- 0
df$transport <- NA
df$transport[df$MSP_id %in% c('MARICUL')] <- 1
df$transport[is.na(df$transport)] <- 0
d <- df[!duplicated(df$category),]
d <- d[,c('category',"Cons...Res","Com.use..Ex","Com.use...non","Fisheries...Com", "transport")]
colnames(d) <- c("category","Conservation Restricted","Commmunity use extractive","Community use non-extractive","Commercial fisheries", "transport")
d$category <- factor( d$category , levels=c("Conservation" ,"Heritage", "RecreationNonExtract","RecreationExtract","CommFishery","SubFish","transport") )
d <- d[order(d$category),]
df <- df[!is.na(df$category),]
summary(is.na(df))
df[is.na(df$target),]
write.csv(df,'UntouchedParadise_layers_20240322/FinalZonesAndTargets.csv',row.names = F)
write.csv(d,'UntouchedParadise_layers_20240322/FinalZones.csv',row.names = F)
####Cost layer########
#Restricted conservation cost layer####
rm(list=ls())
d <- read.csv('UntouchedParadise_layers_20240322/FinalZonesAndTargets.csv')
#Add cumulative pressure layer#####
c1 <- read_sf('UntouchedParadise_layers_20240322/Features.shp')
c1$CUMULAT <- ((c1$CUMULAT - min(c1$CUMULAT)) / (max(c1$CUMULAT) - min(c1$CUMULAT ))) *100
# c1$CUMULAT <- c1$CUMULAT*3
# c1$SHIPPIN <- c1$SHIPPIN*3
ras <- c1
shp <- ras[,'geometry']
#conservation restricted#####
d$ConsResWaiting <- NA
d$ConsResWaiting[d$category %in% c('RecreationExtract','CUMULAT','Dredge','Anchorage','CommFishery','ADZ','SubFish','waste',"Shipping","mining")] <- 1
d$ConsResWaiting[d$category %in% c('RecreationNonExtract','Heritage')] <- 0.5
d$ConsResWaiting[d$category %in% c('Conservation',"defence")] <- 0
summary(is.na(d$ConsResWaiting))
r <- ras[,c(d$MSP_id[d$ConsResWaiting ==1])]
r1 <- ras[,c(d$MSP_id[d$ConsResWaiting ==0.5])]
r1[,colnames(r1)[!(colnames(r1)  %in% c('geometry'))]] <-st_drop_geometry(r1)*0.5
head(r1)
r <- st_join(r,r1,left=T,largest=T)
r$ConsRes <- rowSums(st_drop_geometry(r),na.rm = T)
head(r)
r <- r[,c('ConsRes')]
ggplot(r)+
geom_sf(aes(fill=ConsRes))
shp <- st_join(shp, r,left=T,largest=T )
#Community non-extractive####
d$CommNonExtrWaiting <- NA
d$CommNonExtrWaiting[d$category %in% c('Anchorage','ADZ','RecreationExtract','CommFishery','SubFish','waste')] <- 1
d$CommNonExtrWaiting[d$category %in% c('Dredge','RecreationNonExtract','Heritage','Conservation','CUMULAT')] <- 0
d$CommNonExtrWaiting[d$category %in% c('mining','Shipping','defence')] <- 0.5
r <- ras[,c(d$MSP_id[d$CommNonExtrWaiting ==1])]
r1 <- ras[,c(d$MSP_id[d$CommNonExtrWaiting ==0.5])]
r2 <- ras[,'CUMULAT']
r1[,colnames(r1)[!(colnames(r1)  %in% c('geometry'))]] <- st_drop_geometry(r1)*0.5
r2[,colnames(r2)[!(colnames(r2)  %in% c('geometry'))]] <- st_drop_geometry(r2)/3
r <- st_join(r,r1,left=T,largest=T)
r <- st_join(r,r2,left=T,largest=T)
r$CommNonExtr <- rowSums(st_drop_geometry(r),na.rm = T)
head(r)
r <- r[,c('CommNonExtr')]
shp <- st_join(shp, r,left=T,largest=T )
#Community extractive####
d$CommExtrWaiting <- NA
d$CommExtrWaiting[d$category %in% c('Dredge','Anchorage','ADZ')] <- 1
d$CommExtrWaiting[d$category %in% c('CUMULAT','RecreationNonExtract','Heritage','RecreationExtract','SubFish')] <- 0
d$CommExtrWaiting[d$category %in% c('CommFishery','Conservation','mining','waste','Shipping','defence')] <- 0.5
r <- ras[,c(d$MSP_id[d$CommExtrWaiting ==1])]
r1 <- ras[,c(d$MSP_id[d$CommExtrWaiting ==0.5])]
r1[,colnames(r1)[!(colnames(r1)  %in% c('geometry'))]] <- st_drop_geometry(r1)*0.5
r <- st_join(r,r1,left=T,largest=T)
r$CommExtr <- rowSums(st_drop_geometry(r),na.rm = T)
head(r)
r <- r[,c('CommExtr')]
# ggplot(r)+
#   geom_sf(aes(fill=CommExtr))
shp <- st_join(shp, r,left=T,largest=T )
#Commercial fishery####
d$CommFishery <- NA
d$CommFishery[d$category %in% c('ADZ','Dredge','Anchorage')] <- 1
d$CommFishery[d$category %in% c('CUMULAT','CommFishery')] <- 0
d$CommFishery[d$category %in% c('RecreationNonExtract','Heritage','Conservation','RecreationExtract','SubFish','mining','Shipping','waste','defence')] <- 0.5
r <- ras[,c(d$MSP_id[d$CommFishery ==1])]
r1 <- ras[,c(d$MSP_id[d$CommFishery ==0.5])]
r1[,colnames(r1)[!(colnames(r1)  %in% c('geometry'))]] <- st_drop_geometry(r1)*0.5
r <- st_join(r,r1,left=T,largest=T)
r$CommFishery <- rowSums(st_drop_geometry(r),na.rm = T)
head(r)
r <- r[,c('CommFishery')]
shp <- st_join(shp, r,left=T,largest=T )
#Transport#####
ras1 <- ras
ras1$Transport <- 100
ras1$Transport <- ras1$Transport - ras1$MARICUL
r <- ras1[,c('Transport')]
shp <- st_join(shp, r,left=T,largest=T )
head(shp)
summary(is.na(shp))
head(shp)
#Scale cost layers between 0 - 100
min <- min(c(shp$ConsRes,shp$CommNonExtr ,shp$CommExtr,shp$CommFishery))
max <- max(c(shp$ConsRes,shp$CommNonExtr ,shp$CommExtr,shp$CommFishery))
shp$ConsRes <- ((shp$ConsRes - min) / (max - min)) *100
shp$CommNonExtr  <- ((shp$CommNonExtr  - min )/ (max - min)) *100
shp$CommExtr <- ((shp$CommExtr - min) / (max - min)) *100
shp$CommFishery <- ((shp$CommFishery - min) / (max - min)) *100
shp$Transport <- ((shp$Transport - min(shp$Transport)) / (max(shp$Transport) - min(shp$Transport))) *100
shp$ConsRes <-  shp$ConsRes+1
shp$CommExtr <- shp$CommExtr+1
shp$CommNonExtr <- shp$CommNonExtr+1
shp$CommFishery <- shp$CommFishery+1
shp$Transport <- shp$Transport+1
# shp$ConsRes <- ((shp$ConsRes - min(shp$ConsRes)) / (max(shp$ConsRes) - min(shp$ConsRes))) *100
# shp$ConsCon <- ((shp$ConsCon - min(shp$ConsCon)) / (max(shp$ConsCon) - min(shp$ConsCon))) *100
# shp$CommNonExtr  <- ((shp$CommNonExtr  - min(shp$CommNonExtr) )/ (max(shp$CommNonExtr) - min(shp$CommNonExtr))) *100
# shp$CommExtr <- ((shp$CommExtr - min(shp$CommExtr)) / (max(shp$CommExtr) - min(shp$CommExtr))) *100
# shp$CommFishery <- ((shp$CommFishery - min(shp$CommFishery)) / (max(shp$CommFishery) - min(shp$CommFishery))) *100
# shp$Transport <- ((shp$Transport - min(shp$Transport)) / (max(shp$Transport) - min(shp$Transport))) *100
#
# shp$ConsRes <-  shp$ConsRes+1
# shp$ConsCon <- shp$ConsCon+1
# shp$CommExtr <- shp$CommExtr+1
# shp$CommNonExtr <- shp$CommNonExtr+1
# shp$CommFishery <- shp$CommFishery+1
# shp$Transport <- shp$Transport+1
#Check that everything is between 0-100
s <- as.data.frame(shp)
id <- colnames(s)[!(colnames(s) %in% c('geometry'))]
fin <- as.data.frame(matrix(ncol=3,nrow=length(id)))
colnames(fin) <- c('name','n','p')
for(i in 1:length(id)){
fin$name[i] <- id[i]
fin$n[i] <-range(s[,id[i]])[1]
fin$p[i] <-range(s[,id[i]])[2]
}
fin[!(fin$p %in% c(1,100)),]
shp <- shp %>% st_sf(sf_column_name = 'geometry')
# shp <- st_snap(shp, shp, tolerance = 5)
write_sf(shp,'UntouchedParadise_layers_20240322/CostPolygon.shp', delete_dsn = T)
###Create pu layer with features locked in or out#####
rm(list=ls())
setwd('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/')
polygon <- read_sf('Data/UntouchedParadise_layers_20240322/Features.shp')
t <- read_sf('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Data/MPA_corrected.shp')
head(t)
t$lock_in_conres <- NA
t$lock_in_conres[t$MPA1 %in% c('Restricted','No-take')]  <- TRUE
t$lock_in_conres[t$MPA1 %in% c('Controlled')]<- TRUE
t$lock_in_CmmExtr <- FALSE
t$lock_in_CmmNnEx <- FALSE
t$lock_in_CmmFshr <- FALSE
t$lock_in_Trnsprt <- FALSE
colnames(polygon)[order(colnames(polygon))]
polygon <- polygon[,c('SCP','FshTrps','MARICUL')]
t <- st_join(polygon,t,left=T,largest=T)
head(t)
t$lock_in_conres[t$SCP>0] <- T
t$lock_in_Trnsprt[t$MARICUL>0] <- T
t$lock_in_CmmNnEx[t$FshTrps>0] <- T
polygon <- t[,c( 'lock_in_conres','lock_in_CmmNnEx','lock_in_CmmExtr','lock_in_CmmFshr','lock_in_Trnsprt', "geometry"    )]
polygon$lock_in_conres[is.na(polygon$lock_in_conres)] <- FALSE
polygon$lock_in_CmmNnEx[is.na(polygon$lock_in_CmmNnEx)] <- FALSE
polygon$lock_in_CmmExtr[is.na(polygon$lock_in_CmmExtr)] <- FALSE
polygon$lock_in_CmmFshr[is.na(polygon$lock_in_CmmFshr)] <- FALSE
polygon$lock_in_Trnsprt[is.na(polygon$lock_in_Trnsprt)] <- FALSE
polygon$lock_in_conres <- as.logical(polygon$lock_in_conres)
polygon$lock_in_CmmNnEx <- as.logical(polygon$lock_in_CmmNnEx)
polygon$lock_in_CmmExtr <- as.logical(polygon$lock_in_CmmExtr)
polygon$lock_in_CmmFshr <- as.logical(polygon$lock_in_CmmFshr)
polygon$lock_in_Trnsprt <- as.logical(polygon$lock_in_Trnsprt)
ggplot(polygon)+
geom_sf(aes(fill=lock_in_Trnsprt))
p<- read_sf('Data/UntouchedParadise_layers_20240322/CostPolygon.shp')
polygon <- st_join(p,polygon,left=T,largest=T)
head(polygon)
####make sure that araes arent locked in and out ie a bit of the anchorage overlaps with the mpa
for(i in 1:nrow(polygon)){
if(polygon$lock_in_conres[i] && polygon$lock_in_Trnsprt[i] == T){
polygon$lock_in_conres[i] <- F
}
}
for(i in 1:nrow(polygon)){
if(polygon$lock_in_CmmNnEx[i] && polygon$lock_in_conres[i] == T){
polygon$lock_in_conres[i] <- F
}
}
class(polygon)
ggplot(polygon,aes(fill=lock_in_CmmNnEx))+geom_sf()
# polygon <- st_transform(polygon, crs = st_crs(ras))
write_sf(polygon,'Data/UntouchedParadise_layers_20240322/CostPolygon_and_locks.shp',delete_dsn=T)
###Set up dataframe for prioritizR#######
##Change targets based on how much is locked in####
rm(list=ls())
setwd('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Data/')
ras <- read_sf('UntouchedParadise_layers_20240322/Features.shp')
#Remove some layers that you dont need for the bay of plenty
ras <- ras[,!(colnames(ras) %in% c("CUMULAT",'ANCHOR'  ,"SHIPINT", "PrpsdMr", "MnngRgh" ,"HvyMnrl",'OffshrL' ,"defence" ,"Blstwtr" ,"wastwtr",'DUMP','Minke','AglhSRS' ,'Baitbll','BrnzWhl','SHIPPIN'))]
polygon <- read_sf('UntouchedParadise_layers_20240322/CostPolygon_and_locks.shp')
head(polygon)
summary(is.na(polygon))
colnames(polygon) <- c( "ConsRes","CmmNnEx","CmmExtr","CmmFshr",'Trnsprt','lock_in_ConsRes','lock_in_CmmNnEx','lock_in_CmmExtr','lock_in_CmmFshr','lock_in_Trnsprt', "geometry"   )
polygon$lock_in_ConsRes[is.na(polygon$lock_in_ConsRes)] <- 0
polygon$lock_in_CmmNnEx[is.na(polygon$lock_in_CmmNnEx)] <- 0
polygon$lock_in_CmmExtr[is.na(polygon$lock_in_CmmExtr)] <- 0
polygon$lock_in_CmmFshr[is.na(polygon$lock_in_CmmFshr)] <- 0
polygon$lock_in_Trnsprt[is.na(polygon$lock_in_Trnsprt)] <- 0
polygon$lock_in_ConsRes <- as.logical(polygon$lock_in_ConsRes)
polygon$lock_in_CmmNnEx <- as.logical(polygon$lock_in_CmmNnEx)
polygon$lock_in_CmmExtr <- as.logical(polygon$lock_in_CmmExtr)
polygon$lock_in_CmmFshr <- as.logical(polygon$lock_in_CmmFshr)
polygon$lock_in_Trnsprt <- as.logical(polygon$lock_in_Trnsprt)
polygon <- st_join(polygon,ras,left=T,largest=T)
polygon <-polygon[,c( 'lock_in_ConsRes','lock_in_CmmNnEx', names(ras))]
#Crop polygon to MPA restricted and controlled
res <- polygon[polygon$lock_in_ConsRes == T,]
fish <- polygon[polygon$lock_in_CmmNnEx == T,]
d <- read.csv('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Data/UntouchedParadise_layers_20240322/FinalZonesAndTargets.csv')
d <- d[d$MSP_id %in% names(polygon),]
id <- names(polygon)[!(names(polygon) %in% c("lock_in_ConsRes", 'lock_in_CmmNnEx',"geometry"))]
d$conres_area <- NA
d$fish_area <- NA
d$Total_PU <- NA
for(i in 1:length(id)){
tt <- polygon[,id[i]]
colnames(tt) <- c('feature','geometry')
d$Total_PU[d$MSP_id == id[i]] <- sum(tt$feature[tt$feature>0])
r <- res[,id[i]]
colnames(r) <- c('feature','geometry')
d$conres_area[d$MSP_id == id[i]] <- sum(r$feature[r$feature>0])
f <- fish[,id[i]]
colnames(f) <- c('feature','geometry')
d$fish_area[d$MSP_id == id[i]] <- sum(f$feature[f$feature>0])
rm(c,r,f)
}
head(d)
d$Target_PU <- d$Total_PU*d$target
#Now for all activities that are allowed in the MPA restricted and controlled zone, remove these PU from target_PU
#MPA Restricted
unique(d$category)
head(d)
temp <- d[d$category %in% c('CommFishery','SubFish','RecreationExtract','Heritage','RecreationNonExtract'),]
d <-  d[!(d$category %in% c('CommFishery','SubFish','RecreationExtract','Heritage','RecreationNonExtract')),]
temp$Target_PU <- temp$Target_PU - temp$conres_area
d <- rbind(temp,d)
d[d$Target_PU<0,]
#Remove features were more than targeted PUs are already met by the restricted MPA
d <- d[d$Target_PU>0,]
#Check for conservation layers were entire target is met in MPA restricted and controlled existing zones
head(d)
temp <- d[d$category %in% c('Conservation'),]
# d <-  d[!(d$category %in% c('Heritage','RecreationNonExtract')),]
temp$Target_PU <- temp$Target_PU - temp$conres_area
temp <- temp[temp$Target_PU<0,]
d <- d[!(d$MSP_id %in% temp$MSP_id),]
# d <- rbind(temp,d)
#Remove conservationand non extractive recreational features were more than targeted PUs are already met by the fish trips
temp <- d[d$category %in% c('Conservation','RecreationNonExtract','Heritage'),]
temp$Target_PU <- temp$Target_PU - temp$fish_area
temp <- temp[temp$fish_area>0,]
temp <- temp[temp$MSP_id != 'FshTrps',]
d <- d[!(d$MSP_id %in% temp$MSP_id),]
d <- rbind(temp,d)
d <- d[!(d$MSP_id %in% c('AntTrnR','RsTrnRs','OthrTrR')),]
temp <- temp[temp$Target_PU<0,]
d <- d[!(d$MSP_id %in% temp$MSP_id),]
# ggplot(ras)+
#   geom_sf(aes(fill=OthrTrR))
# temp[temp$Target_PU==0,]
# #Remove features were more than targeted PUs are already met by the controlled MPA
# temp <- temp[temp$Target_PU>0,]
# d <- rbind(temp,d)
#Double check that target PU for conservation features is enough to split
# temp <- d[d$category %in% c('Conservation'),]
# temp <- temp[temp$Target_PU < 1000,]
# temp$r <- temp$conres_area-temp$Target_PU
# temp$c <- temp$concon_area-temp$Target_PU
#Create target matrix for prioritizR
d$zone_1 <- round(d$Cons...Res*d$Target_PU,0)
d$zone_2 <- round(d$Com.use...non*d$Target_PU,0)
d$zone_3 <- round(d$Com.use..Ex*d$Target_PU,0)
d$zone_4 <- round(d$Fisheries...Com*d$Target_PU,0)
d$zone_5 <- round(d$transport*d$Target_PU,0)
ras <- ras[,names(ras) %in% d$MSP_id]
#join feature data to polygon
p1 <- st_drop_geometry(ras)
p2 <- st_drop_geometry(ras)
p3 <- st_drop_geometry(ras)
p4 <- st_drop_geometry(ras)
p5 <- st_drop_geometry(ras)
names(p1) <- paste(names(ras),'ConsRes',sep='_')
names(p2) <- paste(names(ras),'CmmNnEx',sep='_')
names(p3) <- paste(names(ras),'CmmExtr',sep='_')
names(p4) <- paste(names(ras),'CmmFshr',sep='_')
names(p5) <- paste(names(ras),'Trnsprt',sep='_')
polygon <- read_sf('UntouchedParadise_layers_20240322/CostPolygon_and_locks.shp')
colnames(polygon) <- c( "ConsRes","CmmNnEx","CmmExtr","CmmFshr",'Trnsprt','lock_in_ConsRes','lock_in_CmmNnEx','lock_in_CmmExtr','lock_in_CmmFshr','lock_in_Trnsprt', "geometry"   )
polygon$lock_in_ConsRes[is.na(polygon$lock_in_ConsRes)] <- 0
polygon$lock_in_CmmNnEx[is.na(polygon$lock_in_CmmNnEx)] <- 0
polygon$lock_in_CmmExtr[is.na(polygon$lock_in_CmmExtr)] <- 0
polygon$lock_in_CmmFshr[is.na(polygon$lock_in_CmmFshr)] <- 0
polygon$lock_in_Trnsprt[is.na(polygon$lock_in_Trnsprt)] <- 0
polygon$lock_in_ConsRes <- as.logical(polygon$lock_in_ConsRes)
polygon$lock_in_CmmNnEx <- as.logical(polygon$lock_in_CmmNnEx)
polygon$lock_in_CmmExtr <- as.logical(polygon$lock_in_CmmExtr)
polygon$lock_in_CmmFshr <- as.logical(polygon$lock_in_CmmFshr)
polygon$lock_in_Trnsprt <- as.logical(polygon$lock_in_Trnsprt)
polygon <- cbind(polygon, p1,p2,p3,p4,p5)
setwd('C:/Users/Tegan/OneDrive - Nelson Mandela University/Postdoc/Analysis/Routput/PrioritizR_Input_UTP_20240322/')
saveRDS(polygon,'polygon.rds')
saveRDS(p1,'p1.rds')
saveRDS(p2,'p2.rds')
saveRDS(p3,'p3.rds')
saveRDS(p4,'p4.rds')
saveRDS(p5,'p5.rds')
#Re-order targets and save as matrix
temp <- as.data.frame(matrix(ncol=ncol(d),nrow=nrow(d)))
colnames(temp) <- colnames(d)
feature <- names(st_drop_geometry(ras))
for(i in 1:length(feature)){
temp[i,] <- d[d$MSP_id == feature[i],]
}
d <- temp
targets <- matrix(
cbind(d$zone_1,d$zone_2,d$zone_3,d$zone_4,d$zone_5),
nrow=nrow(d),
ncol=5,
dimnames = list(
d$MSP_id,c( "ConsRes","CmmNnEx","CmmExtr","CmmFshr",'Trnsprt')
)
)
saveRDS(targets,'targets.rds')
